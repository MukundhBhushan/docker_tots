#creating and running multiple comtainers at the same time
    #in the main project folder create
    #create docker-compose.yml

#in docker-compose.yml
  version: 'latest version number'
  services:
    <service name>: #sevice name 
      image: #searches in dockerhub
        <docker image name> #this name will be given to the custom docker file being used and not from dockerhub
        
      build: #to build images with own dockerfile 
        context: .| <file location of working dir>
        dockerfile: <name of docker file> #use this if docker file name is not "dockerfile" ie if u gave ur own name to ur dockerfile
      restart: "always"| "no" | "on-failure" | "unless-stopped"
      volumes:
        - <folder location in docker file> #contents in the folder are overwritten if part of other folders otherwise not mounted
        - <src folder>:<destination folder> #files in the src folder(can be folder in image or host system) are copied in to destination folder(can be folder in image or host system)
        - <src folder2>:<destination folder2> # docker compose understands '.' as current working directory $(pwd) is not needed
        - <src folder3>:<destination folder3>
      # - is used to define arrays in yml
      
      command: 
        <command line instruction>
      environment: #used for storing environment variables
        <key>:<value> 
      ports:
        - <port>:<app port> #maps port app is listening(<app port>) to <port>
      depends_on:
        - <service name it depends on> #ie this container needs/ depends on the <service x> to work fine
      

    <name of docker image2>:
      image: <image name from dockerhub> #use only during dev use build during production  #volumes list is a must when using image
      build: <file location of the docker image> #to be used for building cusom docker images
      volumes:
        - <src folder>:<destination folder> #files in the src folder(can be folder in image or host system) are copied in to destination folder(can be folder in image or host system)
        - <src folder2>:<destination folder2>
        - <src folder3>:<destination folder3>
      ports:
        - <port>:<app port> #maps port app is listening(<app port>) to <port>
      depends_on:
        - <name of docker image>


#restarting automatically (Restart policy)
"no" : never
"always": restart always
"on-failure": error in code and container crash
"unless-stopped": always restart until forcebly stopped
#<---------connecting containers-------->
#------data can be transefered from one comtainer to the other if the file is present in the services list in docker-compose.yml by sending http req 
#http://<name of docer image>


        
#<-------starting/stoping docker compose------>
#in the project folder which has docker-compose.yml file
docker-compose up -d [-d is not a must] #-d for detached mode containes run in the background 
docker-compose stop
docker-compose down
docker-compose up == docker container run <image name>

docker-compose up --build == docker container build <image location> docker container run <image name>  

